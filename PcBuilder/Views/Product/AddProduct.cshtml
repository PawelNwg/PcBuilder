@model PcBuilder.Models.ViewModels.AddProductViewModel
@{
    ViewData["Title"] = "Dodawanie produktu";
}
<head>
    <link href="~/css/Cart.css" rel="stylesheet" />
</head>
<div class="row col-lg-10">
    <div class="col-10">
        <h1> @ViewData["Title"] </h1>
        <hr />
        <form asp-action="AddProduct">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control h100"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <select asp-for="CategoryId" class="form-select" aria-label="Default select example">
                <option selected value="0">wybierz kategorię</option>
                @if (Model.Categories != null)
                {
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.CategoryId"> @category.Name </option>
                    }
                }
            </select>
            <br />
            <span asp-validation-for="CategoryId" class="text-danger"></span>
            <div class="form-group">
                <input type="submit" value="Zatwierdź" class="btn btn-primary btn-block mt-3" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    

}

<script>

    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }

    $.validator.methods.number = function (value, element) {
        return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }
    //Date dd/MM/yyyy
    $.validator.methods.date = function (value, element) {
        var date = value.split("/");
        return this.optional(element) || !/Invalid|NaN/.test(new Date(date[2], date[1], date[0]).toString());
    }
</script>